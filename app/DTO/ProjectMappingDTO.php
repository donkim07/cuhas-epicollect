<?php

namespace ec5\DTO;

use ec5\Libraries\Utilities\Arrays;
use ec5\Services\Mapping\ProjectMappingService;

/*
|--------------------------------------------------------------------------
| Project Mapping DTO
|--------------------------------------------------------------------------
| A DTO for the JSON Data Mapping
|
*/

class ProjectMappingDTO extends ProjectDTOBase
{
    /**
     * @param array $data
     */
    public function create(array $data)
    {
        $this->data = $data;
    }


    /**
     * @param array $data
     */
    public function updateProjectDetails(array $data)
    {
        //
    }

    public function getMapCount(): int
    {
        return count($this->data);
    }

    /**
     * @param $mapIndex
     */
    public function deleteMapping($mapIndex)
    {
        // If we are deleting the default mapping, we must
        // set the auto generated as the new default
        if ($this->data[$mapIndex]['is_default']) {
            $this->data[0]['is_default'] = true;
        }
        unset($this->data[$mapIndex]);
    }

    /** * Get an array of all the map indexes
     */
    public function getMapIndexes(): array
    {
        return array_keys($this->data);
    }

    public function setEC5AUTOMapping($mapping)
    {
        $this->data[0] = $mapping;
    }

    public function createCustomMapping($payload)
    {
        // Get the auto-generated map (always indexed 0)
        $autoGeneratedMap = $this->data[0];
        // Get the next available map number
        end($this->data);
        $nextAvailableMapIndex = key($this->data) + 1;
        $isDefault = $payload['is_default'] ?? false;

        $this->data[$nextAvailableMapIndex] = [
            'name' => $payload['name'],
            'is_default' => $isDefault,
            // Set the auto-generated map as the content of the new map
            'forms' => $autoGeneratedMap['forms'],
            'map_index' => $nextAvailableMapIndex
        ];

        // Set this as the default map if required
        if ($isDefault) {
            $this->setDefault($nextAvailableMapIndex);
        }
    }

    /**
     *
     * @param int $mapIndex
     **/
    public function setDefault(int $mapIndex)
    {
        // Set all mappings as default false
        foreach ($this->data as $index => $mapping) {
            $this->data[$index]['is_default'] = false;
        }

        // Set the required mapping default to true
        $this->data[$mapIndex]['is_default'] = true;
    }

    /**
     * @param int $mapIndex
     * @param string $name
     */
    public function renameMap(int $mapIndex, string $name)
    {
        $this->data[$mapIndex]['name'] = $name;
    }

    /**
     * @param $mapIndex
     * @param $map
     */
    public function updateMap($mapIndex, $map)
    {
        $this->data[$mapIndex] = $map;
    }

    /**
     * @param ProjectExtraDTO $projectExtra
     * @param ProjectMappingService $projectMappingService
     */
    public function updateMappings(ProjectExtraDTO $projectExtra, ProjectMappingService $projectMappingService)
    {
        // Recreate the EC5 AUTO mapping
        $mapping = $projectMappingService->createEC5AUTOMapping($projectExtra->getData());
        $this->setEC5AUTOMapping($mapping);

        // Then loop each map in $this->data and update
        foreach ($this->data as $mapIndex => $value) {
            if ($mapIndex == 0) {
                continue;
            }
            // Merge each map with the auto generated
            $this->data[$mapIndex] = Arrays::merge($this->data[0], $this->data[$mapIndex]);
        }
    }

    /**
     * @return int
     */
    public function getLastMapIndex(): int
    {
        // Point to the last item in $this->data array
        end($this->data);
        return key($this->data);
    }

//    /**
//     * Get the last map
//     *
//     * @return array
//     */
    public function getLastMap(): array
    {
        return $this->data[$this->getLastMapIndex()];
    }


    public function getMap($mapIndex, $formRef): array
    {
        return $this->data[$mapIndex]['forms'][$formRef] ?? [];
    }

    /**
     * @return int
     */
    public function getDefaultMapIndex(): int
    {
        // Retrieve default map
        foreach ($this->data as $mapIndex => $mapping) {
            if ($this->data[$mapIndex]['is_default']) {
                return $mapIndex;
            }
        }
        // Otherwise, return auto map
        return 0;
    }

    public function getDefaultMapName(): string
    {
        // Retrieve default map name
        foreach ($this->data as $mapIndex => $mapping) {
            if ($this->data[$mapIndex]['is_default']) {
                return $mapping['name'];
            }
        }
        // Otherwise, return EC5 AUTO mapping
        return config('epicollect.mappings.default_mapping_name');
    }

    /**
     * @param int $mapIndex
     * @return array
     */
    public function getMapDetails(int $mapIndex): array
    {
        // If a map index was not supplied, set the default
        if (!isset($this->data[$mapIndex])) {
            $mapIndex = $this->getDefaultMapIndex();
        }

        return [
            'map_name' => $this->data[$mapIndex]['name'],
            'map_index' => $mapIndex
        ];
    }
}
